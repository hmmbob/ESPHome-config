substitutions:
  devicename: slimmelezer
  upper_devicename: Slimme Lezer
  device_description: "DIY P1 module to read your smart meter"

################ Generics ################
esphome:
  name: ${devicename}
  comment: "${device_description}"
  platform: ESP8266
  board: d1_mini
  esp8266_restore_from_flash: true
  name_add_mac_suffix: false

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    gateway: !secret wifi_gateway
    subnet: !secret wifi_subnet
    static_ip: !secret wifi_static_ip_p1reader

api:

logger:
  # Must be 0 to disable the serial logging. This cannot work
  # the same time uart on pin 13 / D7 is working.
  baud_rate: 0
  level: info

ota:

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/Amsterdam

web_server:
  port: 80

################ Components ################
dsmr:
  id: dsmr_instance
  request_interval: 5s

http_request:
  timeout: 2s

uart:
  - id: uart_bus
    baud_rate: 115200
    rx_pin: D7

################ Sensors ################
binary_sensor:
  - platform: status
    name: ${upper_devicename} Status

button:
  - platform: restart
    name: ${upper_devicename} Restart

sensor:
  - platform: uptime
    name: ${upper_devicename} uptime
    update_interval: 300s

  - platform: dsmr
    energy_delivered_tariff1:
      id: dsmr_electricity_delivered_1
      name: "Energy Consumed Tariff 1"
      state_class: total_increasing
    energy_returned_tariff1:
      id: dsmr_electricity_returned_1
      name: "Energy Produced Tariff 1"
      state_class: total_increasing
    energy_delivered_tariff2:
      id: dsmr_electricity_delivered_2
      name: "Energy Consumed Tariff 2"
      state_class: total_increasing
    energy_returned_tariff2:
      id: dsmr_electricity_returned_2
      name: "Energy Produced Tariff 2"
      state_class: total_increasing
    power_delivered:
      accuracy_decimals: 3
      id: dsmr_electricity_currently_delivered
      name: "Power Consumed"
    power_returned:
      accuracy_decimals: 3
      id: dsmr_electricity_currently_returned
      name: "Power Produced"
    voltage_l1:
      id: dsmr_phase_voltage_l1
      name: "Voltage Phase 1"
    voltage_l2:
      id: dsmr_phase_voltage_l2
      name: "Voltage Phase 2"
    voltage_l3:
      id: dsmr_phase_voltage_l3
      name: "Voltage Phase 3"
    current_l1:
      id: dsmr_phase_power_current_l1
      name: "Current Phase 1"
    current_l2:
      id: dsmr_phase_power_current_l2
      name: "Current Phase 2"
    current_l3:
      id: dsmr_phase_power_current_l3
      name: "Current Phase 3"
    power_delivered_l1:
      accuracy_decimals: 3
      id: dsmr_phase_currently_delivered_l1
      name: "Power Consumed Phase 1"
    power_delivered_l2:
      accuracy_decimals: 3
      id: dsmr_phase_currently_delivered_l2
      name: "Power Consumed Phase 2"
    power_delivered_l3:
      accuracy_decimals: 3
      id: dsmr_phase_currently_delivered_l3
      name: "Power Consumed Phase 3"
    power_returned_l1:
      accuracy_decimals: 3
      id: dsmr_phase_currently_returned_l1
      name: "Power Produced Phase 1"
    power_returned_l2:
      accuracy_decimals: 3
      id: dsmr_phase_currently_returned_l2
      name: "Power Produced Phase 2"
    power_returned_l3:
      accuracy_decimals: 3
      id: dsmr_phase_currently_returned_l3
      name: "Power Produced Phase 3"
    gas_delivered:
      id: dsmr_extra_device_delivered
      name: "Gas Consumed"
      state_class: total_increasing

text_sensor:
  - platform: version
    hide_timestamp: true
    name: ${upper_devicename} Version
  - platform: wifi_info
    ip_address:
      name: "${upper_devicename} IP Address"
    ssid:
      name: "${upper_devicename} Wi-Fi SSID"
    bssid:
      name: "${upper_devicename} Wi-Fi BSSID"
  - platform: dsmr
    timestamp:
      id: dsmr_timestamp
      internal: true
  - platform: template
    id: dsmr_timestamp_formatted
    internal: true
    update_interval: 2s
    lambda: |-
      esphome::optional<std::string> result;
      std::string input = id(dsmr_timestamp).state;
      if (!input.empty()) {
        std::string year = "20" + input.substr(0, 2);
        std::string month = input.substr(2, 2);
        std::string day = input.substr(4, 2);
        std::string hour = input.substr(6, 2);
        std::string minute = input.substr(8, 2);
        std::string second = input.substr(10, 2);
        std::string indicator = input.substr(12, 1);
        std::string timezone = "+00:00";
        if (indicator == "W") {
          timezone = "+01:00";
        } else if (indicator == "S") {
          timezone = "+02:00";
        }
        result = year + "-" + month + "-" + day + "T" + hour + ":" + minute + ":" + second + timezone;
      }
      return result;

interval:
  - interval: 15sec
    then:
      - http_request.post:
          url: !secret dsmr_reader_url
          # url: http://x.x.x.x/api/v2/datalogger/dsmrreading
          headers:
            Authorization: !secret dsmr_reader_token
            # Authorization: Token ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890
            Content-Type: application/json
          verify_ssl: false
          json: |-
            root["electricity_currently_delivered"] = id(dsmr_electricity_currently_delivered).state;
            root["electricity_currently_returned"] = id(dsmr_electricity_currently_returned).state;
            root["electricity_delivered_1"] = id(dsmr_electricity_delivered_1).state;
            root["electricity_delivered_2"] = id(dsmr_electricity_delivered_2).state;
            root["electricity_returned_1"] = id(dsmr_electricity_returned_1).state;
            root["electricity_returned_2"] = id(dsmr_electricity_returned_2).state;
            root["extra_device_delivered"] = id(dsmr_extra_device_delivered).state;
            root["extra_device_timestamp"] = id(dsmr_timestamp_formatted).state;
            root["phase_currently_delivered_l1"] = id(dsmr_phase_currently_delivered_l1).state;
            root["phase_currently_delivered_l2"] = id(dsmr_phase_currently_delivered_l2).state;
            root["phase_currently_delivered_l3"] = id(dsmr_phase_currently_delivered_l3).state;
            root["phase_currently_returned_l1"] = id(dsmr_phase_currently_returned_l1).state;
            root["phase_currently_returned_l2"] = id(dsmr_phase_currently_returned_l2).state;
            root["phase_currently_returned_l3"] = id(dsmr_phase_currently_returned_l3).state;
            root["phase_power_current_l1"] = id(dsmr_phase_power_current_l1).state;
            root["phase_power_current_l2"] = id(dsmr_phase_power_current_l2).state;
            root["phase_power_current_l3"] = id(dsmr_phase_power_current_l3).state;
            root["phase_voltage_l1"] = id(dsmr_phase_voltage_l1).state;
            root["phase_voltage_l2"] = id(dsmr_phase_voltage_l2).state;
            root["phase_voltage_l3"] = id(dsmr_phase_voltage_l3).state;
            root["timestamp"] = id(dsmr_timestamp_formatted).state;
